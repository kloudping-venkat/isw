# ADO Agent Master Deployment Script
# Coordinates the complete setup of Azure DevOps Build Agents

param(
    [Parameter(Mandatory=$false)]
    [string]$Environment = "CS",

    [Parameter(Mandatory=$false)]
    [string]$VmName = $env:COMPUTERNAME
)

# Create logging directory
$logDir = "C:\temp"
if (-not (Test-Path $logDir)) {
    New-Item -Path $logDir -ItemType Directory -Force
}

$logFile = "$logDir\ADO_Deployment_Log.txt"

# Logging function
function Write-Log {
    param([string]$Message, [string]$Color = "White")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timestamp - $Message"
    Write-Host $logMessage -ForegroundColor $Color
    $logMessage | Out-File -FilePath $logFile -Append
}

try {
    Write-Log "=== ADO Agent Master Deployment Started ===" "Green"
    Write-Log "Environment: $Environment" "Cyan"
    Write-Log "VM Name: $VmName" "Cyan"
    Write-Log "Start Time: $(Get-Date)" "Cyan"

    # Stage 1: Disk Verification and Provisioning  
    Write-Log "Stage 1: Disk Verification and Provisioning" "Yellow"
    
    # Step 1a: Verify disk attachment
    Write-Log "Step 1a: Verifying Azure data disk attachment..." "Cyan"
    if (Test-Path ".\Verify_Disk_Attachment.ps1") {
        Write-Log "Running disk verification script..." "White"
        $diskVerificationResult = & ".\Verify_Disk_Attachment.ps1"
        if ($LASTEXITCODE -eq 0) {
            Write-Log "Disk verification passed - all expected disks are attached" "Green"
        } else {
            Write-Log "WARNING: Disk verification failed - proceeding anyway but provisioning may fail" "Yellow"
        }
    } else {
        Write-Log "WARNING: Disk verification script not found - skipping verification" "Yellow"
    }
    
    # Step 1b: ADO disk provisioning
    Write-Log "Step 1b: ADO disk provisioning..." "Cyan"
    if (Test-Path ".\Provisioning_disks_ADO.ps1") {
        Write-Log "Running ADO disk provisioning script..." "Cyan"
        & ".\Provisioning_disks_ADO.ps1"
        if ($LASTEXITCODE -eq 0) {
            Write-Log "ADO disk provisioning completed successfully" "Green"
        } else {
            Write-Log "WARNING: ADO disk provisioning script returned non-zero exit code" "Yellow"
        }
        Start-Sleep -Seconds 10
    } else {
        Write-Log "WARNING: ADO disk provisioning script not found" "Red"
    }

    # Stage 2: Domain Join (will cause restart)
    Write-Log "Stage 2: Domain Join" "Yellow"
    $restartMarker = "C:\temp\ado_restart_marker.txt"
    $postRestartScript = "C:\temp\ADO_PostRestart_Continue.ps1"

    if (-not (Test-Path $restartMarker)) {
        if (Test-Path ".\BOFA_domain_join.ps1") {
            Write-Log "Creating restart marker and post-restart continuation script..." "Cyan"
            "ADO domain join initiated at $(Get-Date)" | Out-File -FilePath $restartMarker -Force

            # Create post-restart continuation script
            $postRestartContent = @"
# ADO Post-Restart Continuation Script
# Auto-generated by ADO_Master_Deploy.ps1
Set-Location "C:\Packages\Plugins\Microsoft.Compute.CustomScriptExtension\1.10\Downloads\0"
powershell -ExecutionPolicy Unrestricted -File ".\ADO_Master_Deploy.ps1" -Environment "$Environment" -VmName "$VmName"
"@
            $postRestartContent | Out-File -FilePath $postRestartScript -Force

            # Create scheduled task to run post-restart
            Write-Log "Creating scheduled task for post-restart continuation..." "Cyan"
            $action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-ExecutionPolicy Unrestricted -File `"$postRestartScript`""
            $trigger = New-ScheduledTaskTrigger -AtStartup
            $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
            $principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
            Register-ScheduledTask -TaskName "ADO-PostRestart-Continue" -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force

            Write-Log "Domain join will restart the VM. Post-restart configuration will continue automatically via scheduled task." "Yellow"
            & ".\BOFA_domain_join.ps1"
            exit 0  # Exit here as VM will restart
        } else {
            Write-Log "WARNING: Domain join script not found" "Red"
        }
    } else {
        Write-Log "Domain join already completed (restart marker found), continuing..." "Green"
        # Remove scheduled task if it exists
        try {
            Unregister-ScheduledTask -TaskName "ADO-PostRestart-Continue" -Confirm:$false -ErrorAction SilentlyContinue
            Write-Log "Removed post-restart scheduled task" "Green"
        } catch {
            Write-Log "Scheduled task removal: $($_.Message)" "Yellow"
        }
    }

    # Wait for domain join to complete
    Start-Sleep -Seconds 30

    # Stage 3: ADO Agent Server Configuration (post-restart)
    Write-Log "Stage 3: ADO Agent Server Roles and Tools Installation" "Yellow"
    if (Test-Path ".\ado-server-roles.ps1") {
        Write-Log "Running ADO server roles and tools installation script..." "Cyan"
        & ".\ado-server-roles.ps1"
        Write-Log "ADO server configuration completed" "Green"
        Start-Sleep -Seconds 15
    } else {
        Write-Log "WARNING: ADO server roles script not found" "Red"
    }

    # Stage 4: Security Tools (common to all BOFA VMs)
    Write-Log "Stage 4: Security Tools Installation" "Yellow"

    # SentinelOne
    if (Test-Path ".\SentinelOne_install.ps1") {
        Write-Log "Installing SentinelOne..." "Cyan"
        & ".\SentinelOne_install.ps1"
        Write-Log "SentinelOne installation completed" "Green"
    } else {
        Write-Log "WARNING: SentinelOne script not found" "Red"
    }

    # Tanium
    if (Test-Path ".\Tanium_install_script.ps1") {
        Write-Log "Installing Tanium..." "Cyan"
        & ".\Tanium_install_script.ps1"
        Write-Log "Tanium installation completed" "Green"
    } else {
        Write-Log "WARNING: Tanium script not found" "Red"
    }

    # Oracle Client (for database connectivity in builds)
    if (Test-Path ".\Oracle_client_install.ps1") {
        Write-Log "Installing Oracle Client..." "Cyan"
        & ".\Oracle_client_install.ps1"
        Write-Log "Oracle Client installation completed" "Green"
    } else {
        Write-Log "WARNING: Oracle Client script not found" "Red"
    }

    # gMSA Configuration
    if (Test-Path ".\gMSA_configuration.ps1") {
        Write-Log "Configuring gMSA..." "Cyan"
        & ".\gMSA_configuration.ps1"
        Write-Log "gMSA configuration completed" "Green"
    } else {
        Write-Log "WARNING: gMSA script not found" "Red"
    }

    # Datadog and GPG
    if (Test-Path ".\Datadog_GPG_install.ps1") {
        Write-Log "Installing Datadog and GPG tools..." "Cyan"
        & ".\Datadog_GPG_install.ps1" -Environment $Environment -InstallDatadog $true -InstallGPG $true
        Write-Log "Datadog and GPG installation completed" "Green"
    } else {
        Write-Log "WARNING: Datadog/GPG script not found" "Red"
    }

    Write-Log "=== ADO Agent VM Configuration Completed Successfully! ===" "Green"

    # Final cleanup
    Write-Log "Performing final cleanup..." "Yellow"
    try {
        Remove-Item -Path "C:\temp\ado_restart_marker.txt" -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "C:\temp\ADO_PostRestart_Continue.ps1" -Force -ErrorAction SilentlyContinue
        Write-Log "Cleanup completed successfully" "Green"
    } catch {
        Write-Log "Cleanup warning: $($_.Message)" "Yellow"
    }

    # Final verification and summary
    Write-Log "=== DEPLOYMENT SUMMARY ===" "Cyan"
    Write-Log "VM Name: $VmName" "White"
    Write-Log "Environment: $Environment" "White"
    Write-Log "Role: ADO Build Agent" "White"

    # Check domain status
    try {
        $domainInfo = Get-ComputerInfo | Select-Object CsDomain, CsPartOfDomain
        if ($domainInfo.CsPartOfDomain) {
            Write-Log "Domain Status: JOINED to $($domainInfo.CsDomain)" "Green"
        } else {
            Write-Log "Domain Status: NOT JOINED (still in workgroup)" "Yellow"
        }
    } catch {
        Write-Log "Domain Status: Unable to determine" "Yellow"
    }

    # Check disk status
    try {
        $disks = Get-Disk | Where-Object { $_.Number -gt 0 }
        Write-Log "Data Disks: $($disks.Count) disk(s) found" "White"
        foreach ($disk in $disks) {
            $partition = Get-Partition -DiskNumber $disk.Number -ErrorAction SilentlyContinue | Where-Object { $_.DriveLetter }
            if ($partition) {
                Write-Log "  Disk $($disk.Number): $([math]::Round($disk.Size/1GB))GB -> Drive $($partition.DriveLetter):" "White"
            }
        }
    } catch {
        Write-Log "Disk Status: Unable to determine" "Yellow"
    }

    # Check ADO directories on both drives
    Write-Log "ADO Agent Directories:" "White"
    $adoDirs = @("E:\azagent", "E:\builds", "E:\temp", "E:\logs", "R:\builds-archive", "R:\artifacts", "R:\cache", "R:\workspace")
    foreach ($dir in $adoDirs) {
        if (Test-Path $dir) {
            Write-Log "  $dir: EXISTS" "Green"
        } else {
            Write-Log "  $dir: MISSING" "Yellow"
        }
    }

    Write-Log "=== ADO AGENT DEPLOYMENT COMPLETED AT $(Get-Date) ===" "Green"
    Write-Log "=== NEXT STEPS ===" "Yellow"
    Write-Log "1. Install Azure DevOps Agent: https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/v2-windows" "White"
    Write-Log "2. Configure agent with organization URL and Personal Access Token" "White"
    Write-Log "3. Test build and deployment pipelines" "White"

    "=== ADO Agent Master Deployment Completed: $(Get-Date) ===" | Out-File -FilePath $logFile -Append

} catch {
    Write-Log "ERROR: $($_.Exception.Message)" "Red"
    Write-Log "Full Error Details: $($_ | Out-String)" "Red"
    "ERROR: $($_.Exception.Message)" | Out-File -FilePath $logFile -Append
    exit 1
}