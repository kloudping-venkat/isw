# BOFA Master Deployment Script
# This script orchestrates all BOFA deployment requirements

param(
    [string]$VmName = $env:COMPUTERNAME,
    [string]$Environment = "CS",
    [string]$Role = "WebServer"
)

$ErrorActionPreference = "Continue"
$logFile = "C:\temp\bofa_deployment.log"

# Create temp directory and log file
New-Item -ItemType Directory -Path "C:\temp" -Force | Out-Null
"=== BOFA Master Deployment Started: $(Get-Date) ===" | Out-File -FilePath $logFile -Append

function Write-Log {
    param($Message, $Color = "White")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] $Message"
    Write-Host $logMessage -ForegroundColor $Color
    $logMessage | Out-File -FilePath $logFile -Append
}

try {
    Write-Log "=== Starting BOFA VM Configuration ===" "Cyan"
    Write-Log "VM Name: $VmName" "White"
    Write-Log "Environment: $Environment" "White"
    Write-Log "Role: $Role" "White"

    # Set PowerShell execution policy
    Write-Log "Setting PowerShell execution policy..." "Yellow"
    Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope LocalMachine -Force
    Write-Log "PowerShell execution policy set to Unrestricted" "Green"

    # Stage 1: Disk Verification and Provisioning
    Write-Log "Stage 1: Disk Verification and Provisioning" "Yellow"
    
    # Step 1a: Verify disk attachment
    Write-Log "Step 1a: Verifying Azure data disk attachment..." "Cyan"
    if (Test-Path ".\Verify_Disk_Attachment.ps1") {
        Write-Log "Running disk verification script..." "White"
        $diskVerificationResult = & ".\Verify_Disk_Attachment.ps1"
        if ($LASTEXITCODE -eq 0) {
            Write-Log "Disk verification passed - all expected disks are attached" "Green"
        } else {
            Write-Log "WARNING: Disk verification failed - proceeding anyway but provisioning may fail" "Yellow"
        }
    } else {
        Write-Log "WARNING: Disk verification script not found - skipping verification" "Yellow"
    }
    
    # Step 1b: Disk provisioning
    Write-Log "Step 1b: Disk provisioning..." "Cyan"
    $diskScript = if ($Role -eq "WebServer") { "Provisioning_disks_WEB.ps1" } else { "Provisioning_disks_APP.ps1" }

    if (Test-Path ".\$diskScript") {
        Write-Log "Running disk provisioning script: $diskScript" "Cyan"
        & ".\$diskScript"
        if ($LASTEXITCODE -eq 0) {
            Write-Log "Disk provisioning completed successfully" "Green"
        } else {
            Write-Log "WARNING: Disk provisioning script returned non-zero exit code" "Yellow"
        }
        Start-Sleep -Seconds 10
    } else {
        Write-Log "WARNING: Disk provisioning script not found: $diskScript" "Red"
    }

    # Stage 2: Domain Join (will cause restart)
    Write-Log "Stage 2: Domain Join" "Yellow"
    $restartMarker = "C:\temp\bofa_restart_marker.txt"
    $postRestartScript = "C:\temp\BOFA_PostRestart_Continue.ps1"

    if (-not (Test-Path $restartMarker)) {
        if (Test-Path ".\BOFA_domain_join.ps1") {
            Write-Log "Creating restart marker and post-restart continuation script..." "Cyan"
            "Domain join initiated at $(Get-Date)" | Out-File -FilePath $restartMarker -Force
            
            # Create post-restart continuation script
            $postRestartContent = @"
# BOFA Post-Restart Continuation Script
# Auto-generated by BOFA_Master_Deploy.ps1
Set-Location "C:\Packages\Plugins\Microsoft.Compute.CustomScriptExtension\1.10\Downloads\0"
powershell -ExecutionPolicy Unrestricted -File ".\BOFA_Master_Deploy.ps1" -Environment "$Environment" -Role "$Role"
"@
            $postRestartContent | Out-File -FilePath $postRestartScript -Force
            
            # Create scheduled task to run post-restart
            Write-Log "Creating scheduled task for post-restart continuation..." "Cyan"
            $action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-ExecutionPolicy Unrestricted -File `"$postRestartScript`""
            $trigger = New-ScheduledTaskTrigger -AtStartup
            $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
            $principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
            Register-ScheduledTask -TaskName "BOFA-PostRestart-Continue" -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force
            
            Write-Log "Domain join will restart the VM. Post-restart configuration will continue automatically via scheduled task." "Yellow"
            & ".\BOFA_domain_join.ps1"
            exit 0  # Exit here as VM will restart
        } else {
            Write-Log "WARNING: Domain join script not found" "Red"
        }
    } else {
        Write-Log "Domain join already completed (restart marker found), continuing..." "Green"
        # Remove scheduled task if it exists
        try {
            Unregister-ScheduledTask -TaskName "BOFA-PostRestart-Continue" -Confirm:$false -ErrorAction SilentlyContinue
            Write-Log "Removed post-restart scheduled task" "Green"
        } catch {
            Write-Log "Scheduled task removal: $($_.Message)" "Yellow"
        }
    }

    # Wait for domain join to complete
    Start-Sleep -Seconds 30

    # Stage 3: Server Roles and ASP.NET (post-restart)
    Write-Log "Stage 3: Server Roles and ASP.NET Installation" "Yellow"
    $rolesScript = if ($Role -eq "WebServer") { "web-server-roles.ps1" } else { "app-server-roles.ps1" }

    if (Test-Path ".\$rolesScript") {
        Write-Log "Running server roles script: $rolesScript" "Cyan"
        & ".\$rolesScript"
        Write-Log "Server roles installation completed" "Green"
        Start-Sleep -Seconds 15
    } else {
        Write-Log "WARNING: Server roles script not found: $rolesScript" "Red"
    }

    # Stage 4: Security Tools
    Write-Log "Stage 4: Security Tools Installation" "Yellow"

    if (Test-Path ".\SentinelOne_install.ps1") {
        Write-Log "Installing SentinelOne..." "Cyan"
        & ".\SentinelOne_install.ps1"
        Write-Log "SentinelOne installation completed" "Green"
    } else {
        Write-Log "WARNING: SentinelOne script not found" "Red"
    }

    Start-Sleep -Seconds 10

    if (Test-Path ".\Tanium_install_script.ps1") {
        Write-Log "Installing Tanium..." "Cyan"
        & ".\Tanium_install_script.ps1"
        Write-Log "Tanium installation completed" "Green"
    } else {
        Write-Log "WARNING: Tanium script not found" "Red"
    }

    Start-Sleep -Seconds 15

    # Stage 5: Additional Software
    Write-Log "Stage 5: Additional Software Installation" "Yellow"

    if (Test-Path ".\Oracle_client_install.ps1") {
        Write-Log "Installing Oracle Client..." "Cyan"
        & ".\Oracle_client_install.ps1"
        Write-Log "Oracle Client installation completed" "Green"
    } else {
        Write-Log "WARNING: Oracle client script not found" "Red"
    }

    Start-Sleep -Seconds 20

    if (Test-Path ".\gMSA_configuration.ps1") {
        Write-Log "Configuring gMSA Account..." "Cyan"
        & ".\gMSA_configuration.ps1" -Environment $Environment
        Write-Log "gMSA configuration completed" "Green"
    } else {
        Write-Log "WARNING: gMSA script not found" "Red"
    }

    Start-Sleep -Seconds 10

    if (Test-Path ".\Datadog_GPG_install.ps1") {
        Write-Log "Installing Datadog and GPG tools..." "Cyan"
        & ".\Datadog_GPG_install.ps1" -Environment $Environment -InstallDatadog $true -InstallGPG $true
        Write-Log "Datadog and GPG installation completed" "Green"
    } else {
        Write-Log "WARNING: Datadog/GPG script not found" "Red"
    }

    Write-Log "=== BOFA VM Configuration Completed Successfully! ===" "Green"
    
    # Final cleanup
    Write-Log "Performing final cleanup..." "Yellow"
    try {
        Remove-Item -Path "C:\temp\bofa_restart_marker.txt" -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "C:\temp\BOFA_PostRestart_Continue.ps1" -Force -ErrorAction SilentlyContinue
        Write-Log "Cleanup completed successfully" "Green"
    } catch {
        Write-Log "Cleanup warning: $($_.Message)" "Yellow"
    }
    
    # Final verification and summary
    Write-Log "=== DEPLOYMENT SUMMARY ===" "Cyan"
    Write-Log "VM Name: $VmName" "White"
    Write-Log "Environment: $Environment" "White"
    Write-Log "Role: $Role" "White"
    
    # Check domain status
    try {
        $domainInfo = Get-ComputerInfo | Select-Object CsDomain, CsPartOfDomain
        if ($domainInfo.CsPartOfDomain) {
            Write-Log "Domain Status: JOINED to $($domainInfo.CsDomain)" "Green"
        } else {
            Write-Log "Domain Status: NOT JOINED (still in workgroup)" "Yellow"
        }
    } catch {
        Write-Log "Domain Status: Unable to determine" "Yellow"
    }
    
    # Check disk status
    try {
        $disks = Get-Disk | Where-Object { $_.Number -gt 0 }
        Write-Log "Data Disks: $($disks.Count) disk(s) found" "White"
        foreach ($disk in $disks) {
            $partition = Get-Partition -DiskNumber $disk.Number -ErrorAction SilentlyContinue | Where-Object { $_.DriveLetter }
            if ($partition) {
                Write-Log "  Disk $($disk.Number): $([math]::Round($disk.Size/1GB))GB -> Drive $($partition.DriveLetter):" "White"
            }
        }
    } catch {
        Write-Log "Disk Status: Unable to determine" "Yellow"
    }
    
    Write-Log "=== BOFA DEPLOYMENT COMPLETED AT $(Get-Date) ===" "Green"
    "=== BOFA Master Deployment Completed: $(Get-Date) ===" | Out-File -FilePath $logFile -Append

} catch {
    Write-Log "ERROR: $($_.Exception.Message)" "Red"
    Write-Log "Full Error Details: $($_ | Out-String)" "Red"
    "ERROR: $($_.Exception.Message)" | Out-File -FilePath $logFile -Append
    exit 1
}